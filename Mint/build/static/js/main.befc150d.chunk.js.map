{"version":3,"sources":["utils/pinata.js","utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","axios","pinJSONToIPFS","JSONBody","a","post","headers","pinata_api_key","process","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","console","log","message","web3","createAlchemyWeb3","contractABI","contractAddress","mintNFT","url","name","description","trim","status","metadata","Object","image","pinataResponse","tokenURI","eth","Contract","window","contract","transactionParameters","to","from","ethereum","selectedAddress","methods","encodeABI","request","method","params","txHash","connectWallet","addressArray","obj","address","target","href","getCurrentWalletConnected","length","Minter","props","useState","walletAddress","setWallet","setStatus","setName","setDescription","setURL","useEffect","on","accounts","connectWalletPressed","walletResponse","onMintPressed","className","id","onClick","String","substring","type","placeholder","onChange","event","value","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8tKAAAA,EAAQ,KAAUC,SAClB,IAGMC,EAAQF,EAAQ,KAETG,EAAa,uCAAG,WAAMC,GAAN,SAAAC,EAAA,+HAGlBH,EACFI,KAJoB,iDAIVF,EAAU,CACjBG,QAAS,CACLC,eAXJC,uBAYIC,sBAXDD,sEAcNE,MAAK,SAAUC,GACb,MAAO,CACHC,SAAS,EACTC,UAAW,qCAAuCF,EAASG,KAAKC,aAGtEC,OAAM,SAAUC,GAEb,OADAC,QAAQC,IAAIF,GACL,CACHL,SAAS,EACTQ,QAASH,EAAMG,aApBF,2CAAH,sD,QCL1BrB,EAAQ,KAAUC,SAClB,IAEMqB,GAAOC,EADiBvB,EAAQ,KAA9BuB,mBADWd,yEAIbe,EAAcxB,EAAQ,KACtByB,EAAkB,6CAEXC,EAAO,uCAAG,WAAOC,EAAKC,EAAMC,GAAlB,uBAAAxB,EAAA,yDAEJ,IAAdsB,EAAIG,QAAgC,IAAfF,EAAKE,QAAsC,IAAtBD,EAAYC,OAFpC,yCAGZ,CACNjB,SAAS,EACTkB,OAAQ,oEALU,cASfC,EAAW,IAAIC,QACZL,KAAOA,EAChBI,EAASE,MAAQP,EACjBK,EAASH,YAAcA,EAZF,SAeQ1B,EAAc6B,GAftB,WAefG,EAfe,QAgBDtB,QAhBC,0CAiBV,CACHA,SAAS,EACTkB,OAAQ,qEAnBK,eAsBfK,EAAWD,EAAerB,UAtBX,UAwBG,IAAIQ,EAAKe,IAAIC,SAASd,EAAaC,GAxBtC,eAwBrBc,OAAOC,SAxBc,OA2BhBC,EAAwB,CAC3BC,GAAIjB,EACJkB,KAAMJ,OAAOK,SAASC,gBACtB,KAAQN,OAAOC,SAASM,QAAQpB,QAAQa,OAAOK,SAASC,gBAAiBT,GAAUW,aA9BhE,oBAmCFR,OAAOK,SACvBI,QAAQ,CACLC,OAAQ,sBACRC,OAAQ,CAACT,KAtCM,eAmCjBU,EAnCiB,yBAwChB,CACHtC,SAAS,EACTkB,OAAQ,mFAAgFoB,IA1CrE,4DA6ChB,CACHtC,SAAS,EACTkB,OAAQ,sCAA8B,KAAMV,UA/CzB,2DAAH,0DAoDP+B,EAAa,uCAAG,8BAAA/C,EAAA,0DACrBkC,OAAOK,SADc,0CAGML,OAAOK,SAASI,QAAQ,CACjDC,OAAQ,wBAJW,cAGfI,EAHe,OAMfC,EAAM,CACVvB,OAAQ,oEACRwB,QAASF,EAAa,IARH,kBAUdC,GAVc,yDAYd,CACLC,QAAS,GACTxB,OAAQ,gBAAQ,KAAIV,UAdD,yDAkBhB,CACLkC,QAAS,GACTxB,OACE,+BACE,8BACG,IADH,eAEK,IACH,mBAAGyB,OAAO,SAASC,KAAI,oCAAvB,2FAzBe,yDAAH,qDAoCXC,EAAyB,uCAAG,4BAAArD,EAAA,0DACnCkC,OAAOK,SAD4B,0CAGRL,OAAOK,SAASI,QAAQ,CACjDC,OAAQ,iBAJyB,aAG7BI,EAH6B,QAMlBM,OAAS,GANS,yCAO1B,CACLJ,QAASF,EAAa,GACtBtB,OAAQ,sEATuB,gCAY1B,CACLwB,QAAS,GACTxB,OAAQ,iEAduB,mFAkB5B,CACLwB,QAAS,GACTxB,OAAQ,gBAAQ,KAAIV,UApBa,yDAwB9B,CACLkC,QAAS,GACTxB,OACE,+BACE,8BACG,IADH,eAEK,IACH,mBAAGyB,OAAO,SAASC,KAAI,oCAAvB,2FA/B6B,0DAAH,qDCMzBG,EApGA,SAACC,GAAU,MAGWC,mBAAS,IAHpB,mBAGjBC,EAHiB,KAGFC,EAHE,OAIIF,mBAAS,IAJb,mBAIjB/B,EAJiB,KAITkC,EAJS,OAKAH,mBAAS,IALT,mBAKjBlC,EALiB,KAKXsC,EALW,OAMcJ,mBAAS,IANvB,mBAMjBjC,EANiB,KAMJsC,EANI,OAOFL,mBAAS,IAPP,mBAOjBnC,EAPiB,KAOZyC,EAPY,KAkCxBC,oBAAS,sBAAC,gCAAAhE,EAAA,sEACwBqD,IADxB,gBACDH,EADC,EACDA,QAASxB,EADR,EACQA,OAChBiC,EAAUT,GACVU,EAAUlC,GA3BNQ,OAAOK,SACTL,OAAOK,SAAS0B,GAAG,mBAAmB,SAACC,GACjCA,EAASZ,OAAS,GACpBK,EAAUO,EAAS,IACnBN,EAAU,uEAEVD,EAAU,IACVC,EAAU,oEAIdA,EACE,8BACG,IADH,eAEK,IACH,mBAAGT,OAAO,SAASC,KAAI,oCAAvB,wFASE,2CAKT,IAED,IAAMe,EAAoB,uCAAG,4BAAAnE,EAAA,sEACE+C,IADF,OACrBqB,EADqB,OAE3BR,EAAUQ,EAAe1C,QACzBiC,EAAUS,EAAelB,SAHE,2CAAH,qDAMpBmB,EAAa,uCAAG,8BAAArE,EAAA,sEACKqB,EAAQC,EAAKC,EAAMC,GADxB,gBACZE,EADY,EACZA,OACRkC,EAAUlC,GAFU,2CAAH,qDAKnB,OACE,sBAAK4C,UAAU,SAAf,UACE,wBAAQC,GAAG,eAAeC,QAASL,EAAnC,SACGT,EAAcJ,OAAS,EACtB,cACAmB,OAAOf,GAAegB,UAAU,EAAG,GACnC,MACAD,OAAOf,GAAegB,UAAU,IAEhC,oDAIJ,uBACA,oBAAIH,GAAG,QAAP,+DACA,yGAGA,iCACE,8DACA,uBACEI,KAAK,OACLC,YAAY,gDACZC,SAAU,SAACC,GAAD,OAAWf,EAAOe,EAAM3B,OAAO4B,UAE3C,qDACA,uBACEJ,KAAK,OACLC,YAAY,qBACZC,SAAU,SAACC,GAAD,OAAWjB,EAAQiB,EAAM3B,OAAO4B,UAE5C,4DACA,uBACEJ,KAAK,OACLC,YAAY,yCACZC,SAAU,SAACC,GAAD,OAAWhB,EAAegB,EAAM3B,OAAO4B,aAGrD,wBAAQR,GAAG,aAAaC,QAASH,EAAjC,sBAGA,mBAAGE,GAAG,SAAN,SACG7C,QCtFMsD,MARf,WACE,OACE,qBAAKV,UAAU,MAAf,SACE,cAAC,EAAD,OCMSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB7E,MAAK,YAAkD,IAA/C8E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.befc150d.chunk.js","sourcesContent":["require('dotenv').config();\r\nconst key = process.env.REACT_APP_PINATA_KEY;\r\nconst secret = process.env.REACT_APP_PINATA_SECRET;\r\n\r\nconst axios = require('axios');\r\n\r\nexport const pinJSONToIPFS = async(JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    //making axios POST request to Pinata ⬇️\r\n    return axios \r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: key,\r\n                pinata_secret_api_key: secret,\r\n            }\r\n        })\r\n        .then(function (response) {\r\n           return {\r\n               success: true,\r\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n\r\n    });\r\n};","import {pinJSONToIPFS} from './pinata.js'\r\nrequire('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0x4C4a07F737Bf57F6632B6CAB089B78f62385aCaE\";\r\n\r\nexport const mintNFT = async (url, name, description) => {\r\n    //error handling\r\n if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) { \r\n    return {\r\n     success: false,\r\n     status: \"❗Please make sure all fields are completed before minting.\",\r\n    }\r\n   }\r\n   //make metadata\r\n  const metadata = new Object();\r\n  metadata.name = name;\r\n  metadata.image = url;\r\n  metadata.description = description;\r\n\r\n  //make pinata call\r\n  const pinataResponse = await pinJSONToIPFS(metadata);\r\n  if (!pinataResponse.success) {\r\n      return {\r\n          success: false,\r\n          status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n      }\r\n  } \r\n  const tokenURI = pinataResponse.pinataUrl;  \r\n\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n  //set up your Ethereum transaction\r\n const transactionParameters = {\r\n    to: contractAddress, // Required except during contract publications.\r\n    from: window.ethereum.selectedAddress, // must match user's active address.\r\n    'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI()//make call to NFT smart contract \r\n};\r\n\r\n//sign the transaction via Metamask\r\ntry {\r\nconst txHash = await window.ethereum\r\n    .request({\r\n        method: 'eth_sendTransaction',\r\n        params: [transactionParameters],\r\n    });\r\nreturn {\r\n    success: true,\r\n    status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\r\n}\r\n} catch (error) {\r\nreturn {\r\n    success: false,\r\n    status: \"😥 Something went wrong: \" + error.message\r\n}\r\n\r\n}\r\n}\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const obj = {\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n          address: addressArray[0],\r\n        };\r\n        return obj;\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };\r\n\r\n  export const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_accounts\",\r\n        });\r\n        if (addressArray.length > 0) {\r\n          return {\r\n            address: addressArray[0],\r\n            status: \"👆🏽 Write a message in the text-field above.\",\r\n          };\r\n        } else {\r\n          return {\r\n            address: \"\",\r\n            status: \"🦊 Connect to Metamask using the top right button.\",\r\n          };\r\n        }\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };","import { useEffect, useState } from \"react\";\r\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from \"./utils/interact.js\";\r\n\r\nconst Minter = (props) => {\r\n\r\n  //State variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [url, setURL] = useState(\"\");\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n \r\n  useEffect(async () => {\r\n    const {address, status} = await getCurrentWalletConnected();\r\n    setWallet(address)\r\n    setStatus(status); \r\n    addWalletListener();\r\n}, []);\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onMintPressed = async () => {\r\n    const { status } = await mintNFT(url, name, description);\r\n    setStatus(status);\r\n};\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\">🧙‍♂️ Alchemy NFT Minter</h1>\r\n      <p>\r\n        Simply add your asset's link, name, and description, then press \"Mint.\"\r\n      </p>\r\n      <form>\r\n        <h2>🖼 Link to asset: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\r\n          onChange={(event) => setURL(event.target.value)}\r\n        />\r\n        <h2>🤔 Name: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. My first NFT!\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <h2>✍️ Description: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n      </form>\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n","import './App.css';\r\nimport Minter from './Minter'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Minter></Minter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}